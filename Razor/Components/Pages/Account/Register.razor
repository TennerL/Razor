@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Identity
@using System.ComponentModel.DataAnnotations
@using BlazorBootstrap;
@inject UserManager<IdentityUser> UserManager
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [Authorize]

<EditForm Model="Model"  OnSubmit="HandleValidSubmit" FormName="RegisterForm">
    <div class="row">
        <div class="col">
            <label>Nutzername:
            <InputText class="form-control" @bind-Value="Model!.Username" />
            </label>
        </div>
        <div class="col">
            <label for="email">Email:</label>
            <InputText class="form-control" id="email" @bind-Value="Model!.Email" />
        </div>
    </div>

    <div>
        <label for="password">Password:</label>
        <InputText class="form-control" id="password" type="password" @bind-Value="Model!.Password" />
    </div>

    <div>
        <label for="confirmPassword">Password bestätigen:</label>
        <InputText class="form-control" id="confirmPassword" type="password" @bind-Value="Model!.ConfirmPassword" />
    </div>

    <div>
        <label for="role">Rolle:</label>
        <select class="form-control" id="role" @bind="Model!.Role">
            <option value="user">User</option>
            <option value="Admin">Admin</option>
        </select>
    </div>

    <div style="margin-top:25px;">
        <button class="btn btn-primary" type="submit">Register</button>
    </div>

</EditForm>

@if (errorMessages.Any())
{
    <div class="alert alert-danger">
        <ul>
            @foreach (var error in errorMessages)
            {
                <li>@error</li>
            }
        </ul>
    </div>
}

@code {
    [SupplyParameterFromForm]
    private RegisterForm? Model { get; set; }
    protected override void OnInitialized() => Model ??= new();

    public class RegisterForm
    {
        public string? Username { get; set; }
        public string? Email { get; set; }
        public string? Password { get; set; }
        public string? ConfirmPassword { get; set; }
        public string Role { get; set; } = "user";
    }

    private List<string> errorMessages = new List<string>();
    private async Task HandleValidSubmit()
    {
        errorMessages.Clear();  

        if (Model?.Password != Model?.ConfirmPassword)
        {
            errorMessages.Add("Passwords do not match.");
            return;
        }
        if (string.IsNullOrEmpty(Model?.Username))
        {
            errorMessages.Add("No Username");
            return;
        }

        var user = new IdentityUser
        {
            UserName = Model.Username,
            Email = Model.Email
        };

        // Sicherstellen, dass das Passwort nicht null ist
        if (string.IsNullOrEmpty(Model.Password))
        {
            errorMessages.Add("Password cannot be null or empty.");
            return;
        }

        // Versuch, den Benutzer zu erstellen
        var result = await UserManager.CreateAsync(user, Model.Password);

        if (result.Succeeded)
        {
            var roleResult = await UserManager.AddToRoleAsync(user, Model.Role);
            if (!roleResult.Succeeded)
            {
                foreach (var error in roleResult.Errors)
                {
                    errorMessages.Add(error.Description);
                }
                return;
            }
        }
        else
        {
            // Fehlerbehandlung: Anzeigen von Fehlermeldungen
            foreach (var error in result.Errors)
            {
                errorMessages.Add(error.Description);  // Fehlermeldungen zur Liste hinzufügen
            }
        }
    }
}
