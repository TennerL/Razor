@inject UserManagementService UserManagementService
@inject RoleAttributeService RoleAttributeService
@inject ToastService ToastService
@using BlazorBootstrap;
@rendermode InteractiveServer

<select class="form-select" @onchange="async (e) => await OnChangedRole(e.Value?.ToString())">
    <option value="">Auswahl</option>
    @foreach (var role in roles)
    {
        <option value="@role.Id">@role.Name</option>
    }
</select>

@if (!string.IsNullOrEmpty(selectedId))
{
    <div class="row" style="margin-top:10px;">
        <div class="col-6">
            <label for="mediaControl">Medienfeatures:</label>
            <div id="mediaControl" class="form-check form-switch">
                <input class="form-check-input" type="checkbox" role="switch"
                       checked="@IsMediaControlEnabled" id="switchMediaControl"
                       @onchange="OnMediaControlChanged" />
            </div>
        </div>

        <div class="col-6">
            <label for="thumbControl">Thumbnails:</label>
            <div id="thumbControl" class="form-check form-switch">
                <input class="form-check-input" type="checkbox" role="switch"
                       checked="@IsThumbnailEnabled" id="switchThumbnailControl"
                       @onchange="OnThumbnailControlChanged" />
            </div>
        </div>

        <div class="col-6">
            <label for="autoplayControl">Autoplay:</label>
            <div id="autoplayControl" class="form-check form-switch">
                <input class="form-check-input" type="checkbox" role="switch" checked="@IsAutoplayEnabled" @onchange="OnAutoplayControlChanged"
                       id="switchAutoplayControl" />
            </div>
        </div>


        <label for="maxFilesize">Max. Upload (MB)</label>
        <input id="maxFilesize" class="form-control" type="number" value="@maxFileSize"
               @onchange="(e) => { maxFileSize = Convert.ToInt32(e.Value); ChangeFilesizeLimit(); }" />
    </div>
}


@code {

    List<RoleDto> roles = new();
    RoleAttributes? roleAttribute;
    RoleAttributes? maxSizeAttribute;
    RoleAttributes? thumbnailAttribute;
    RoleAttributes? autoplayAttribute;
    List<UserDto> users = new();
    int maxFileSize = 0;
    string selectedId = "";
    private bool IsMediaControlEnabled = false;
    private bool IsThumbnailEnabled = false;
    private bool IsAutoplayEnabled = false;

    private void ShowMessage(ToastType toastType)
    {
        ToastService.Notify(new ToastMessage
        {
            Type = toastType,
            Title = "Admin",
            Message = $"Änderungen gespeichert {DateTime.Now}"
        });
    }


    private async Task OnMediaControlChanged(ChangeEventArgs e)
    {
        IsMediaControlEnabled = (bool)Convert.ToBoolean(e.Value);
        await AddRoleAttributes(IsMediaControlEnabled, "MediaControl");
    }
    private async Task OnThumbnailControlChanged(ChangeEventArgs e)
    {
        IsThumbnailEnabled = e.Value?.ToString()?.ToLower() == "true";
        await AddRoleAttributes(IsThumbnailEnabled, "Thumbnails");
    }
    private async Task OnAutoplayControlChanged(ChangeEventArgs e)
    {
        IsAutoplayEnabled = e.Value?.ToString()?.ToLower() == "true";
        await AddRoleAttributes(IsAutoplayEnabled, "Autoplay");
    }


    protected override async Task OnInitializedAsync()
    {
        await LoadRoles();
    }

    private async Task LoadRoles()
    {
        roles = await UserManagementService.GetRoles();
    }


    private async Task LoadRoleAttributes()
    {
        try
        {
            roleAttribute = await RoleAttributeService.GetRoleAttribute(selectedId, "MediaControl");
            thumbnailAttribute = await RoleAttributeService.GetRoleAttribute(selectedId, "Thumbnails");
            maxSizeAttribute = await RoleAttributeService.GetRoleAttribute(selectedId, "MaxFileSize");
            autoplayAttribute = await RoleAttributeService.GetRoleAttribute(selectedId, "Autoplay");

            IsMediaControlEnabled = Convert.ToBoolean(roleAttribute?.Value ?? 0);
            IsThumbnailEnabled = Convert.ToBoolean(thumbnailAttribute?.Value ?? 0);
            IsAutoplayEnabled = Convert.ToBoolean(autoplayAttribute?.Value ?? 0);

            if (maxSizeAttribute != null)
            {
                maxFileSize = maxSizeAttribute.Value;
            }
            else
            {
                await ChangeFilesizeLimit();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[LoadRoleAttributes] Error: {ex.Message}");
            Console.WriteLine(ex.StackTrace);
        }
    }

    private async Task OnChangedRole(string role)
    {
        selectedId = role;
        await LoadRoleAttributes();
    }

    private async Task AddRoleAttributes(bool isActive, string attributeName)
    {
        await RoleAttributeService.AddRoleAttributes(selectedId, attributeName, Convert.ToInt32(isActive));
        ShowMessage(ToastType.Dark);
    }
    private async Task ChangeFilesizeLimit()
    {
        await RoleAttributeService.AddRoleAttributes(selectedId, "MaxFileSize", maxFileSize);
    }
}
