@page "/admin"
@using System.Security.Claims
@inherits LayoutComponentBase

@inject FileAccessService FileAccessService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManagementService UserManagementService
@inject ToastService ToastService
@rendermode InteractiveServer
@attribute [Authorize]

<Toasts class="p-3" AutoHide="true" Delay="4000" Placement="ToastsPlacement.TopRight" />


<h2>Admin</h2>

<hr />

<div class="row">
    <div class="col-10">
        <Button Color="ButtonColor.Primary" Outline="true" @onclick="() => OpenModal(modal)"><span class="bi-people-fill" /> Nutzerverwaltung </Button>
        <Button Color="ButtonColor.Primary" Outline="true" @onclick="() => OpenModal(modalRoles)"><span class="bi-person-fill-gear" /> Rollenverwaltung</Button>
        <Button Color="ButtonColor.Primary" Outline="true" @onclick="() => OpenModal(dataSources)"><span class="bi-hdd-network-fill" /> Datenquellen</Button>
        <Button Color="ButtonColor.Primary" Outline="true" @onclick="() => OpenModal(customAccessRules)"><span class="bi-file-ruled" /> Erweitert</Button>
    </div>
</div>
<hr />

<Modal @ref="modal" Title="Nutzerverwaltung">
    <BodyTemplate>
        <Register />
    </BodyTemplate>
</Modal>

<Modal @ref="modalRoles" Title="Rollenverwaltung">
    <BodyTemplate>
        <RoleManager />
    </BodyTemplate>
</Modal>

<h3>Nutzerliste</h3>

<table class="table mt-3">
    <thead>
        <tr>
            <th>Benutzer-ID</th>
            <th>Benutzername</th>
            <th>E-Mail</th>
            <th>Rollen</th>
            <th>Aktion</th>
        </tr>
    </thead>
    <tbody>
        @if (users != null)
        {
            @foreach (var user in users)
            {
                <tr>
                    <td>@user.Id</td>
                    <td>@user.UserName</td>
                    <td>@user.Email</td>
                    <td>
                        <select class="form-select" @onchange="async (e) => await ChangeUserRole(user, e.Value?.ToString())">
                            @foreach (var role in roles)
                            {
                                @if (role.Name == user.Role)
                                {
                                    <option value="@role.Name" selected>@role.Name</option>
                                }
                                else
                                {
                                    <option value="@role.Name">@role.Name</option>
                                }
                            }
                        </select>
                    </td>


                    <td>
                        <Button Class="btn btn-danger" @onclick="() => DeleteUser(user)">Löschen</Button>
                    </td>
                </tr>
            }
        }
    </tbody>
</table>

<Modal @ref="customAccessRules" Title="Erweiterte Einschränkungen" Size="ModalSize.Large">
    <BodyTemplate>
        <div class="row">
            <input style="width:80%;" @bind="fileName" class="form-control" />
            <button style="width:15%;" class="btn btn-primary" @onclick="AddRule">Neue Regel</button>
        </div>

        <table class="table mt-3">
            <thead>
                <tr>
                    <th>Dateiname</th>
                    <th>Benutzer-ID</th>
                    <th>Berechtigung</th>
                    <th>Aktion</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var rule in accessRules)
                {
                    <tr>
                        <td>@rule.FilePath</td>
                        <td>@rule.UserId</td>
                        <td>@rule.Permission</td>
                        <td>
                            <button class="btn btn-danger" @onclick="() => DeleteRule(rule)">Löschen</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </BodyTemplate>
</Modal>

<Modal @ref="dataSources" Title="Datenquellen" Size="ModalSize.Large">
    <BodyTemplate>
        <DataSrc /> 
    </BodyTemplate>
</Modal>


@code {

    private Modal modal = default!;
    private Modal modalRoles = default!;
    private Modal customAccessRules = default!;
    private Modal dataSources = default!;

    private void ShowMessage(ToastType toastType)
    {
        ToastService.Notify(new ToastMessage
            {
                Type = toastType,
                Title = "Admin",
                Message = $"Änderungen gespeichert {DateTime.Now}"
            });
    }

    private async Task OpenModal(Modal modal)
    {
        if (modal != null)
        {
            await modal.ShowAsync();
        }
    }

    private async Task CloseModal(Modal modal)
    {
        if (modal != null)
        {
            await modal.HideAsync();
        }
    }


    string fileName = "";
    List<FileAccessRule> accessRules = new();
    List<UserDto> users = new();
    List<RoleDto> roles = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadAccessRules();
        await LoadUsers();
        await LoadRoles();
    }
    private async Task LoadAccessRules()
    {
        accessRules = await FileAccessService.GetAccessRulesFromDb();
    }
    private async Task LoadUsers()
    {
        users = await UserManagementService.GetUsers();
    }
    private async Task LoadRoles()
    {
        roles = await UserManagementService.GetRoles();
    }


    private async Task AddRule()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

        var user = authState.User.Identity;
        var userId = authState.User.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value;

        if (user != null && user.IsAuthenticated)
        {
            await FileAccessService.AddAccessRule(fileName,userId,"All");
        }
        await LoadAccessRules();
        ShowMessage(ToastType.Dark);
    }

    private async Task DeleteRule(FileAccessRule rule)
    {
        await FileAccessService.DeleteAccessRule(rule);
        await LoadAccessRules();
        ShowMessage(ToastType.Dark);
    }

private async Task ChangeUserRole(UserDto user, string newRole)
{
    Console.WriteLine($"Ändere Rolle für Benutzer: {user.UserName} zu {newRole}");
    
    var updateModel = new UpdateRoleModel
    {
        UserId = user.Id,
        NewRole = newRole
    };

    var result = await UserManagementService.UpdateUserRoleAsync(updateModel);
    if (result)
    {
        await LoadUsers();
        ShowMessage(ToastType.Dark);
    }
    else
    {
        Console.WriteLine("Fehler beim Ändern der Rolle");
    }
}



    private async Task DeleteUser(UserDto user)
    {
        await UserManagementService.DeleteUserAsync(user.Id);
        await LoadUsers();
        ShowMessage(ToastType.Dark);
    }

}


