@page "/files/{RequestedFile}"
@using System.Security.Claims
@inject NavigationManager Navigation
@inject FileAccessService FileAccessService
@inject RequestFileService RequestFileService
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [Authorize]
<h3>Files</h3>

<h1>

    File: 

    @if (string.IsNullOrEmpty(RequestedFile))
    {
        @:none
    }
    else
    {
        @RequestedFile
    }

</h1>

<h1>
    HasPermission:

    @accessMessage
</h1>


@code {

    private string accessMessage = "";

    protected override async Task OnParametersSetAsync()
    {
        await CheckPermission(); 
    }

    private async Task CheckPermission()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User.Identity;
        var userId = authState.User.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value;
        

        if (user == null || !user.IsAuthenticated)
        {
            accessMessage = "User is not authenticated.";
            return;
        }
        bool hasPermission = await FileAccessService.HasAccess(RequestedFile, userId, "All");


        accessMessage = hasPermission ? "Zugriff" : "Kein Zugriff";

        if (hasPermission)
        {
            await RequestFileService.GetFile(RequestedFile);
            Navigation.NavigateTo("/req/"+RequestedFile);
        }
    }


    [Parameter]
    public string RequestedFile { get; set; }

}

