@page "/filelist"
@using BlazorBootstrap;
@using System.Security.Claims
@inject FileService FileService
@inject RoleAttributeService RoleAttributeService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManagementService UserManagementService
@inject DataSourceService DataSourceService
@inject NavigationManager NavigationManager
@inject ToastService ToastService
@rendermode InteractiveServer
@attribute [Authorize]

<Toasts class="p-3" AutoHide="true" Delay="4000" Placement="ToastsPlacement.TopRight" />

<style>
    th, td {
        vertical-align: middle !important;
        padding: .1rem .1rem !important;
    }
</style>

<select class="form-select" style="margin-bottom:10px; border-radius:40px; font-weight: bold; text-align:center;" @onchange="async (e) => LoadAll(e.Value?.ToString() ?? String.Empty)">
    @foreach (var dataSource in dataSources)
    {
        <option value="@dataSource.SourcePath">@dataSource.SourcePath</option>
    }
</select>

<nav aria-label="breadcrumb">
    <ol class="breadcrumb" style="display:block; border:var(--bs-border-width) solid var(--bs-border-color); border-radius:10px">
        <button class="btn btn-link" @onclick="@(() => GoToFolder("root","bcnav", currentDataSource))"><span class="bi-house-fill"></span></button>
        @foreach (var breadcrump in breadcrumpParts)
        {
            <button class="btn btn-link" style="color:white; text-decoration:none;" @onclick="@(() => GoToFolder(breadcrump, "bcnav", currentDataSource))">@breadcrump.Replace(@"\","")</button>
        }
    </ol>
</nav>
<div class="mb-3 d-flex gap-2">
    <input class="form-control" @bind="newFolderName" placeholder="Neuer Ordnername" />
    <Button Color="ButtonColor.Success" Outline="true" @onclick="CreateFolder"><span class="bi bi-folder-plus"></span></Button>

    <input class="form-control" @bind="newFileName" placeholder="Neue Textdatei" />
    <Button Color="ButtonColor.Success" Outline="true" @onclick="CreateTextFile"><span class="bi bi-file-earmark-plus"></span></Button>
    <div class="ms-auto">
        <Button Color="ButtonColor.Primary" Outline="true" @onclick="OnShowModalUploadClick"><span class="bi bi-upload"></span></Button>
    </div>

</div>


<input class="form-control" placeholder="Suche" @bind="searchTerm" @oninput="OnSearchChanged" />

<div class="table-responsive" style="margin-top:10px;">
    <table class="table table-striped w-100" @onfocusin="OnHideModalClick">
        <thead>
            <tr>
                <th style="width: 2%; text-align:center;">#</th>
                <th style="width: 5%;"></th>
                <th style="width: 70%;">Dateiname</th>
                <th style="width: 10%;">Dateigröße</th>
                <th style="width: 8%;">Datum</th>
                <th style="width: 5%; text-align:center;">Aktion</th>
            </tr>
        </thead>
        <tbody>
            @if (files == null && folders == null)
            {
                    <tr>
                        <td colspan="6" style="text-align:center;">Lade Dateien...</td>
                    </tr>
            }
            else if (!PagedItems.Any() && !folders.Any())
            {
                    <tr>
                        <td colspan="6" style="text-align:center;">Keine Dateien gefunden.</td>
                    </tr>
            }
            else
            {
                int index = (currentPage - 1) * itemsPerPage + 1;

                @foreach (var item in PagedItems)
                {
                            <tr>
                                        <td style="font-size:small; text-align:center;">@index</td>
                                <td>
                            @if (!item.IsFolder && IsImage(item.Name) && thumbnailFeature)
                            {
                                            <img src="@WebUrl/@currentDataSource.Replace(@"\","|")/@string.Concat(currentPath.Replace(@"\", "|") + item.Name)" 
                                                 alt="@item.Name" style="width:50px; height:50px; object-fit:cover;" />
                            }
                                </td>
                                <td>
                            @if (item.IsFolder)
                            {
                                            <button class="btn btn-link p-0 m-0 text-start" 
                                                    style="font-size:small; text-decoration:none; color:white;" 
                                                    @onclick="@(() => GoToFolder(item.Name, "", currentDataSource))">
                                                [Dir] @item.Name
                                            </button>
                            }
                            else
                            {
                                if (!mediaControlFeature)
                                {
                                                    <a href="@WebUrl/@currentDataSource.Replace(@"\","|")/@string.Concat(currentPath.Replace(@"\", "|"), "|" + item.Name)"
                                                       style="text-decoration:none; color:white; font-size:small; display:block; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;">
                                        @item.Name
                                                    </a>
                                }
                                else
                                {
                                                    <button class="btn btn-link p-0 m-0 text-start" 
                                                            style="font-size:small; text-decoration:none; color:white; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;"
                                                            @onclick="@(() => GetFileStream(currentPath, item.Name))">
                                        @item.Name
                                                    </button>
                                }
                            }
                                </td>
                                <td><span style="font-size:small; color:white;">@(item.IsFolder ? "" : FormatFileSize(item.FileInfo?.Size) ?? "")</span></td>
                                <td><span style="font-size:small; color:white;">@(item.IsFolder ? "" : item.FileInfo?.Date.ToString("dd.MM.yyyy HH:mm") ?? "")</span></td>
                                <td style="text-align:center;">
                                    <button class="btn btn-link text-danger p-0" 
                                            @onclick="@(async () => await ShowConfirmationModal(currentPath, item.Name))">
                                        <span class="bi bi-trash" aria-hidden="true"></span>
                                    </button>
                                </td>
                            </tr>
                    index++;
                }
            }
        </tbody>
    </table>
</div>

<div class="row" style="margin-bottom:50px">
    <div class="col-sm-4" style="display:block ruby; gap:10px;">

        <span>Anzeige #</span>

        <select class="form-control" style="width:50px;" @onchange="HandleItemsPerPageChange">
            <option value="25">25</option>
            <option value="50">50</option>
            <option value="100">100</option>
            <option value="1000">1000</option>
        </select>

        <Button Color="ButtonColor.Secondary" Outline="true" @onclick="PreviousPage" Disabled="@(currentPage == 1)">
            <span class="bi bi-caret-left-fill"></span>
        </Button>

        <select class="form-control" style="width:50px;" @onchange="GoToPage">
            @for(var i = 1; i <= totalPages; i++)
            {
                if(i == currentPage){
                    <option value="@i" selected>@i</option>
                } else
                {
                    <option value="@i">@i</option>
                }
            }
        </select>
        <span> von @totalPages</span>

        <Button Color="ButtonColor.Secondary" Outline="true" @onclick="NextPage" Disabled="@(currentPage == totalPages)">
            <span class="bi bi-caret-right-fill"></span>
        </Button>
    </div>
    <div class="col-sm-8" style="text-align:end;">
        <p>Gesamt: @totalCount</p>
    </div>
</div>

<Modal @ref="media" Title="Medienanzeige" UseStaticBackdrop="true" OnHidePrevented="OnHideModalClick" Size="ModalSize.Large" @onkeydown="@Enter">
    <BodyTemplate>
        @if (isTextFile && !string.IsNullOrEmpty(textFileContent))
        {
            <textarea class="form-control" style="height: 70vh; width: 100%;" @bind="textFileContent"></textarea>
            <button class="btn btn-success mt-2" @onclick="SaveTextFile">Speichern</button>
        }
        else if (!string.IsNullOrEmpty(mediaFileUrl))
        {
            if (mediaFileUrl.EndsWith(".mp4") || mediaFileUrl.EndsWith(".webm") || mediaFileUrl.EndsWith(".mkv"))
            {
                <video controls autoplay width="100%" tabindex="-1" @onended="HandleMediaEnded">
                    <source src="@mediaFileUrl" type="video/mp4">
                    <source src="@mediaFileUrl" type="video/webm">
                    <source src="@mediaFileUrl" type="video/x-matroska">
                    Dein Browser unterstützt kein Video-Tag.
                </video>
            }
            else if (mediaFileUrl.EndsWith(".mp3") || mediaFileUrl.EndsWith(".wav") || mediaFileUrl.EndsWith(".ogg"))
            {
                <audio controls>
                    <source src="@mediaFileUrl" type="audio/mpeg">
                    <source src="@mediaFileUrl" type="audio/wav">
                    <source src="@mediaFileUrl" type="audio/ogg">
                    Dein Browser unterstützt kein Audio-Tag.
                </audio>
            }
            else if (mediaFileUrl.EndsWith(".jpg") || mediaFileUrl.EndsWith(".jpeg") || mediaFileUrl.EndsWith(".png") || mediaFileUrl.EndsWith(".gif") || mediaFileUrl.EndsWith(".JPG") || mediaFileUrl.EndsWith(".PNG"))
            {
                <img src="@mediaFileUrl" alt="Bild" style="max-width:100%; height:auto;">
            }
            else if (mediaFileUrl.EndsWith(".pdf"))
            {
                <div style="position: relative; height: 75vh; overflow: hidden;">
                    <iframe src="@mediaFileUrl"
                    style="position: absolute; top: 0; left: 0; bottom: 0; right: 0;
                                   width: 100%; height: 100%; border: none;">
                    </iframe>
                </div>
            }
            else
            {
                <p>Dateiformat nicht unterstützt.</p>
                <a href="@mediaFileUrl" target="_blank">Datei öffnen</a>
            }
        }
    </BodyTemplate>
</Modal>

<Modal @ref="upload" Title="Upload" UseStaticBackdrop="true" OnHidePrevented="OnHideModalUploadClick" Size="ModalSize.Large">
    <BodyTemplate>
        <Upload dataSource="@currentDataSource"
        CurrentPath="@currentFolderPath"
        OnUploadComplete="@OnUploadFinished" />
    </BodyTemplate>
</Modal>

<Modal @ref="confirmation" Title="Bestätigen" UseStaticBackdrop="true" OnHidePrevented="OnHideModalClick" Size="ModalSize.Large">
    <BodyTemplate>
        <p><b>Sind Sie sicher, dass @modalFile@modalMessage gelöscht werden soll?</b></p>
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Danger" Outline="true" @onclick="(() => ConfirmAction())">Bestätigen</Button>
    </FooterTemplate>
</Modal>

@code {
    private Modal media = default!;
    private Modal upload = default!;
    private Modal confirmation = default!;
    private String modalMessage = "";
    private String modalFile = "";

    private string mediaFileUrl = "";
    private int currentMediaIndex = 0;
    private bool autoplayEnabled = false;

    private List<DataSources> dataSources = new();
    private List<FileData> files = new();
    private List<string> folders = new();
    private List<string> breadcrumpParts = new();
    private List<string> roles = new();
    private RoleAttributes? roleAttributes;
    private int totalCount = 0;
    private int currentPage = 1;
    private int itemsPerPage = 25;
    private int totalPages = 1;
    private string role = "";
    private string currentPath = "";
    private string searchTerm = "";
    private string WebUrl = "";
    private string currentDataSource = "";
    private bool mediaControlFeature = false;
    private bool thumbnailFeature = false;
    public List<string> pagedFilesList { get; private set; } = new();
    private string? textFileContent = null;
    private bool isTextFile = false; 
    private string newFolderName = "";
    private string newFileName = "";
    private string currentFolderPath = "";

    protected override async Task OnInitializedAsync()
    {
        breadcrumpParts.Clear();
        UpdatePagedFilesList();
        WebUrl = NavigationManager.BaseUri + "files";
        await LoadDataSources();
        LoadAll(dataSources.First().SourcePath);
        await LoadRoles();
    }

    private void ShowMessage(ToastType toastType, string message)
    {
        ToastService.Notify(new ToastMessage
            {
                Type = toastType,
                Title = "Hinweis: ",
                Message = $"{message} {DateTime.Now}"
            });
    }

    private string? fileToDeleteName;
    private string? fileToDeletePath;

    private async Task ShowConfirmationModal(string currentPath, string name)
    {
        fileToDeletePath = currentPath;
        fileToDeleteName = name;
        modalMessage = name;
        modalFile = currentPath;
        await confirmation.ShowAsync();
    }

    private async Task ConfirmAction()
    {
        if(fileToDeletePath is not null)
        {
            DeleteFile(fileToDeletePath, fileToDeleteName ?? string.Empty);
            await confirmation.HideAsync();
        }
    }

    private async Task HandleMediaEnded()
    {
        if (autoplayEnabled && currentMediaIndex < pagedFilesList.Count - 1 )
        {
            currentMediaIndex++;
            if (!pagedFilesList[currentMediaIndex].EndsWith(".txt") && !pagedFilesList[currentMediaIndex].EndsWith(".pdf"))
            {
                await GetFileStream(currentPath, pagedFilesList[currentMediaIndex]);
            }
        }
    }

    private async Task LoadDataSources()
    {
        dataSources = await DataSourceService.GetDataSources();
    }

    private void LoadAll(string dataSource)
    {
        currentDataSource = dataSource;
        LoadFolders(dataSource);
        LoadFiles(dataSource);
        UpdatePagedFilesList();
    }

    private void LoadFiles(string dataSource)
    {
        files = FileService.GetFiles(dataSource);
        UpdateTotalPages();
        currentPage = 1;
    }
    private void LoadFolders(string dataSource)
    {
        folders = FileService.GetFolders(dataSource);
        UpdateTotalPages();
        currentPage = 1;
    }

    private void GoToFolder(string folder, string source, string currentDataSource)
    {
        if (folder == "root" && source == "bcnav")
        {
            currentPath = "";
            breadcrumpParts.Clear();
        }
        else if (string.IsNullOrEmpty(source))
        {
            breadcrumpParts.Add(folder + @"\");
            currentPath = String.Join("", breadcrumpParts.ToArray());
        }
        else if (source == "bcnav")
        {
            int i = breadcrumpParts.LastIndexOf(folder);
            breadcrumpParts.RemoveRange(i + 1, breadcrumpParts.Count - (i + 1));
            currentPath = String.Join("", breadcrumpParts.ToArray());
        }
        else if (source == "goto")
        {
            currentPath = folder;
        }

        folders = FileService.FetchFoldersFromFolder(currentPath, currentDataSource);
        files = FileService.FetchFilesFromFolder(currentPath, currentDataSource);
        currentFolderPath = currentPath;

        UpdateTotalPages();
        UpdatePagedFilesList();
        currentPage = 1;
        StateHasChanged();
    }

    private void UpdatePagedFilesList()
    {
        pagedFilesList = PagedItems
            .Where(item => !item.IsFolder)
            .Select(item => item.Name)
            .ToList();
    }

    private bool IsImage(string fileName)
    {
        string[] imageExtensions = { ".jpg", ".jpeg", ".png", ".gif", ".bmp" };
        return imageExtensions.Any(ext => fileName.EndsWith(ext, StringComparison.OrdinalIgnoreCase));
    }

    private void OnUploadFinished()
    {
        GoToFolder(currentFolderPath, "goto", currentDataSource);
    }


    private async Task Enter(KeyboardEventArgs e)
    {
        if (e.Code == "Escape")
        {
            await OnHideModalClick();
        }

        if (e.Code == "ArrowRight")
        {
            if (currentMediaIndex < pagedFilesList.Count - 1)
            {
                currentMediaIndex++;
                await GetFileStream(currentPath, pagedFilesList[currentMediaIndex]);
            }
        }
        else if (e.Code == "ArrowLeft")
        {
            if (currentMediaIndex > 0)
            {
                currentMediaIndex--;
                await GetFileStream(currentPath, pagedFilesList[currentMediaIndex]);
            }
        }
    }

    private async Task GetFileStream(string currentPath, string requestedFile)
    {
        currentMediaIndex = pagedFilesList.IndexOf(requestedFile);
        isTextFile = requestedFile.EndsWith(".txt", StringComparison.OrdinalIgnoreCase);

        if (currentMediaIndex >= 0)
        {
            mediaFileUrl = "";
            textFileContent = null;
            StateHasChanged();
            await Task.Delay(100);

            var normalizedPath = currentPath ?? "";
            if (!string.IsNullOrEmpty(normalizedPath) && !normalizedPath.EndsWith("\\"))
            {
                normalizedPath += "\\";
            }

            normalizedPath = normalizedPath.Replace(@"\", "|");

            var filePath = $"{WebUrl}/{currentDataSource.Replace(@"\", "|")}/{normalizedPath}{requestedFile}";

            if (isTextFile)
            {
                textFileContent = await FileService.GetTextFileContent(currentDataSource, currentPath ?? String.Empty, requestedFile);
            }
            else
            {
                mediaFileUrl = filePath;
            }

            await media.ShowAsync();
        }
        else
        {
            mediaFileUrl = "Index is NULL!";
        }
    }


    private async Task SaveTextFile()
    {
        await FileService.SaveTextFileContent(currentDataSource, currentPath, pagedFilesList[currentMediaIndex], textFileContent ?? "");
    }


    private void CreateFolder()
    {
        if (!string.IsNullOrWhiteSpace(newFolderName))
        {
            string path = Path.Combine(currentDataSource, currentPath);
            FileService.CreateFolder(path, newFolderName);
            GoToFolder(currentFolderPath, "goto", currentDataSource);
            newFolderName = "";
        }
    }

    private async Task CreateTextFile()
    {
        if (!string.IsNullOrWhiteSpace(newFileName))
        {
            if (!newFileName.EndsWith(".txt"))
                newFileName += ".txt";

            string path = Path.Combine(currentDataSource, currentPath);
            await FileService.CreateTextFile(path, newFileName, "--- Generated By Razor ---"); 
            GoToFolder(currentFolderPath, "goto", currentDataSource);
            newFileName = "";
        }
    }

    private void DeleteFile(string currentPath, string requestedFile)
    {          
        FileService.DeleteFile(currentDataSource, currentPath, requestedFile);
        GoToFolder(currentFolderPath, "goto", currentDataSource);
        ShowMessage(ToastType.Dark, "Löschen erfolgreich!");

    }


    private async Task OnShowModalClick()
    {
        if (media != null)
        {
            await media.ShowAsync();
        }
    }

    private async Task OnHideModalClick()
    {
        if (media != null)
        {
            await media.HideAsync();
        }
    }

    private async Task OnShowModalUploadClick()
    {
        if (upload != null)
        {
            await upload.ShowAsync();
        }
    }

    private async Task OnHideModalUploadClick()
    {
        if (upload != null)
        {
            await upload.HideAsync();
        }
    }

    private IEnumerable<(string Name, bool IsFolder, FileData FileInfo)> PagedItems =>
        folders
            .Where(f => string.IsNullOrEmpty(searchTerm) || f.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
            .Select(f => (f, true, new FileData { Name = f })) 
            .Concat(
                files
                    .Where(f => string.IsNullOrEmpty(searchTerm) || f.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
                    .Select(f => (f.Name, false, f))
            )
            .Skip((currentPage - 1) * itemsPerPage)
            .Take(itemsPerPage);

    private string FormatFileSize(long? bytes)
    {
        if (bytes < 1024) return $"{bytes} B";
        if (bytes < 1024 * 1024) return $"{bytes / 1024.0:F1} KB";
        if (bytes < 1024 * 1024 * 1024) return $"{bytes / 1024.0 / 1024.0:F1} MB";
        return $"{bytes / 1024.0 / 1024.0 / 1024.0:F1} GB";
    }


    protected async Task LoadRoles()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User.Identity;
        var userId = authState.User.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value;
        if (userId != null)
        {
            roles = await UserManagementService.GetRoleOfUserAsync(userId);
            role = roles.First();
        }
        StateHasChanged();
        await LoadRoleAttributes();
    }

    public async Task LoadRoleAttributes()
    {
        roleAttributes = await RoleAttributeService.GetRoleAttribute(role, "MediaControl");
        mediaControlFeature = Convert.ToBoolean(roleAttributes?.Value);

        var thumbAttribute = await RoleAttributeService.GetRoleAttribute(role, "Thumbnails");
        thumbnailFeature = Convert.ToBoolean(thumbAttribute?.Value);

        var autoplayAttribute = await RoleAttributeService.GetRoleAttribute(role, "Autoplay");
        autoplayEnabled = Convert.ToBoolean(autoplayAttribute?.Value);
    }

    private void HandleItemsPerPageChange(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int newItemsPerPage))
        {
            itemsPerPage = newItemsPerPage;
            currentPage = 1;
            UpdateTotalPages();
            UpdatePagedFilesList();
            StateHasChanged();
        }
    }

    private void UpdateTotalPages()
    {
        int totalItems = folders.Count(f => string.IsNullOrEmpty(searchTerm) || f.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) +
                         files.Count(f => string.IsNullOrEmpty(searchTerm) || f.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));

        totalPages = (int)Math.Ceiling((double)totalItems / itemsPerPage);
        if (totalPages == 0) totalPages = 1;
        if (currentPage > totalPages) currentPage = totalPages;

        totalCount = totalItems;
    }


    private void PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
        }
        UpdatePagedFilesList();
    }

    private void GoToPage(ChangeEventArgs e)
    {
        if(int.TryParse(e.Value?.ToString(), out int page))
        {
            currentPage = page;
            UpdatePagedFilesList();
            StateHasChanged();
        }
    }


    private void NextPage()
    {
        if (currentPage < totalPages)
        {
            currentPage++;
        }
        UpdatePagedFilesList();
    }

    private void OnSearchChanged(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? "";
        currentPage = 1;
        UpdateTotalPages();
        UpdatePagedFilesList();
        StateHasChanged();
    }
}