@page "/files/{DataSource}/{RequestedFile}"
@using System.Security.Claims
@inject NavigationManager Navigation
@inject FileAccessService FileAccessService
@inject RequestFileService RequestFileService
@inject RoleAttributeService RoleAttributeService
@inject UserManagementService UserManagementService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<IdentityUser> UserManager
@attribute [Authorize]
<h3>Files</h3>

<h1>

    File: 

    @if (string.IsNullOrEmpty(RequestedFile))
    {
        @:none
    }
    else
    {
        @RequestedFile
    }

</h1>

<h1>
    HasPermission:

    @accessMessage
</h1>


@code {
    private string accessMessage = "";
    private bool IsDirectFileStreamEnabled = false;

    protected override async Task OnParametersSetAsync()
    {
        await LoadRoles();
        await CheckPermission(); 
    }

    private async Task CheckPermission()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User.Identity;
        var userId = authState.User.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value;

        if (user == null || !user.IsAuthenticated)
        {
            accessMessage = "User is not authenticated.";
            return;
        }

        bool isAdmin = false;
        if (!string.IsNullOrEmpty(userId))
        {
            var identityUser = await UserManager.FindByIdAsync(userId);


            if (identityUser != null)
            {
                isAdmin = await UserManager.IsInRoleAsync(identityUser, "Admin");
            }


            bool hasPermission = await FileAccessService.HasAccess(RequestedFile, userId, "All");

            accessMessage = hasPermission ? "Zugriff" : "Kein Zugriff";

            var reqFile = "";
            int lastIndex = RequestedFile.LastIndexOf("|");
            if (lastIndex != -1)
            {
                reqFile = RequestedFile.Substring(lastIndex + 1);
            } else
            {
                reqFile = RequestedFile;
            }

            if (hasPermission)
            {
                await RequestFileService.GetFile(RequestedFile, DataSource.Replace("|", @"\"));
                Navigation.NavigateTo("/req/" + reqFile);
            }
            else if (isAdmin && !IsDirectFileStreamEnabled)
            {

                await RequestFileService.GetFile(RequestedFile, DataSource.Replace("|", @"\"));
                Navigation.NavigateTo("/req/" + reqFile);
            }
            else if (isAdmin && IsDirectFileStreamEnabled)
            {
                var encodedFile = Uri.EscapeDataString(RequestedFile);
                var encodedPath = Uri.EscapeDataString(DataSource.Replace("|", @"\"));
                Navigation.NavigateTo(
                    $"/api/files/download?requestedFile={encodedFile}&filePath={encodedPath}",
                    forceLoad: true);                
            }
        }
    }

    private List<string> roles = new();
    private string role = "";

    protected async Task LoadRoles()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User.Identity;
        var userId = authState.User.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value;
        if (userId != null)
        {
            roles = await UserManagementService.GetRoleOfUserAsync(userId);
            role = roles.First();
        }
        StateHasChanged();
        await LoadRoleAttributes();
    }

    public async Task LoadRoleAttributes()
    {
        var DirectStreaming = await RoleAttributeService.GetRoleAttribute(role, "DirectFileStream");
        IsDirectFileStreamEnabled = Convert.ToBoolean(DirectStreaming?.Value);
    }


    [Parameter]
    public required string DataSource { get; set; }
    [Parameter]
    public required string RequestedFile { get; set; }


}

