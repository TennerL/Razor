@page "/admin"
@using System.Security.Claims
@using BlazorBootstrap;
@inject FileAccessService FileAccessService
@inject AuthenticationStateProvider AuthenticationStateProvider
@rendermode InteractiveServer
@attribute [Authorize]


<h3>Admin</h3>

<div class="row" style="gap:50px;">
    <input style="width:80%;" @bind="fileName" class="form-control" />
    <button style="width:15%;" class="btn btn-primary" @onclick="AddRule">Neue Regel</button>
</div>

<hr />

<div class="row">
    <div class="col-4">
        <Button Color="ButtonColor.Secondary" @onclick="OnShowModalClick"><span class="bi-people-fill" /> Nutzerverwaltung </Button>
        <Button Color="ButtonColor.Secondary"><span class="bi-person-fill-gear" /> Rollenverwaltung</Button>
    </div>
</div>
<hr />

<Modal @ref="modal" Title="Nutzerverwaltung">
    <BodyTemplate>
        <Register />
    </BodyTemplate>
</Modal>

<table class="table mt-3">
    <thead>
        <tr>
            <th>Dateiname</th>
            <th>Benutzer-ID</th>
            <th>Berechtigung</th>
            <th>Aktion</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var rule in accessRules)
        {
            <tr>
                <td>@rule.FilePath</td>
                <td>@rule.UserId</td>
                <td>@rule.Permission</td>
                <td>
                    <button class="btn btn-danger" @onclick="() => DeleteRule(rule)">Löschen</button>
                </td>
            </tr>
        }
    </tbody>
</table>



@code {

    private Modal modal = default!;


    private async Task OnShowModalClick()
    {
        if (modal != null)
        {
            await modal.ShowAsync();
        }
    }
    private async Task OnHideModalClick()
    {
        if (modal != null)
        {
            await modal.HideAsync();
        }
    }


    string fileName = "";
    List<FileAccessRule> accessRules = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadAccessRules();
    }
    private async Task LoadAccessRules()
    {
        accessRules = await FileAccessService.GetAccessRulesFromDb();
    }

    private async Task AddRule()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

        var user = authState.User.Identity;
        var userId = authState.User.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value;

        if (user != null && user.IsAuthenticated)
        {
            await FileAccessService.AddAccessRule(fileName,userId,"All");
        }
        await LoadAccessRules();
    }

    private async Task DeleteRule(FileAccessRule rule)
    {
        await FileAccessService.DeleteAccessRule(rule);
        await LoadAccessRules();
    }


}
