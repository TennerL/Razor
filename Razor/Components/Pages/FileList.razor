@page "/filelist"
@using BlazorBootstrap;
@using System.Security.Claims
@inject IJSRuntime JS
@inject FileService FileService
@inject RoleAttributeService RoleAttributeService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManagementService UserManagementService
@rendermode InteractiveServer
@attribute [Authorize]

@if (files == null && folders == null)
{
    <p>Lade Dateien...</p>
}
else if (!files.Any() && !folders.Any())
{
    <p>Keine Dateien gefunden.</p>
}
else
{
    <nav aria-label="breadcrumb">
        <ol class="breadcrumb" style="display:block; border:1px solid; border-radius:10px">
            <button class="btn btn-link" @onclick="@(() => GoToFolder("root"))"><span class="bi-house-fill"></span></button>
            @foreach (var breadcrump in breadcrumpParts)
            {
                <button class="btn btn-link" style="color:white; text-decoration:none;" @onclick="() => GoToFolder(breadcrump)">@breadcrump</button>
            }
        </ol>
    </nav>

    <input class="form-control" placeholder="Suche" @bind="searchTerm" @oninput="OnSearchChanged" />

    <table class="table table-striped" style="margin-top:10px;">
        <thead>
            <tr>
                <th>#</th>
                <th>Dateiname</th>
            </tr>
        </thead>
        <tbody>
            @{
                int index = (currentPage - 1) * itemsPerPage + 1;
            }
            @foreach (var item in PagedItems)
            {
                <tr>
                    <td>@index</td>
                    <td>
                        @if (item.IsFolder)
                        {
                            <button class="btn btn-link" @onclick="() => GoToFolder(item.Name)"
                            style="text-decoration:none; color:white; margin: 0; padding: 0;">
                                [Dir] @item.Name
                            </button>
                        }
                        else
                        {
                            if(!mediaControlFeature)
                            {
                                <a href="https://test.nihonsaba.net/files/@string.Concat(currentPath.Replace(@"\","&"),"&"+item.Name)"
                                style="text-decoration:none; color:white;">
                                    @item.Name
                                </a>
                            } else
                            {
                                <button class="btn btn-link" @onclick="() => GetFileStream(currentPath, item.Name)"
                                style="text-decoration:none; color:white; margin: 0; padding: 0;">@item.Name</button>
                            }
                        ;
                        }
                    </td>
                </tr>
                index++;
            }


        </tbody>
    </table>

    <div class="row" style="margin-bottom:50px">
        <div class="col-sm-4" style="display:block ruby; gap:10px;">

            <span>Anzeige #</span>

            <select class="form-control" style="width:50px;" @onchange="HandleItemsPerPageChange">
                <option value="25">25</option>
                <option value="50">50</option>
            </select>

            <button class="btn btn-primary" @onclick="PreviousPage" disabled="@(currentPage == 1)">
                Zurück
            </button>

            <span>Seite @currentPage von @totalPages</span>

            <button class="btn btn-primary" @onclick="NextPage" disabled="@(currentPage == totalPages)">
                Weiter
            </button>
        </div>
        <div class="col-sm-8" style="text-align:end;">
            <p>Gesamt: @totalCount</p>
        </div>
    </div>
}


<Modal @ref="media" Title="Medienanzeige">
    <BodyTemplate>
        @if (!string.IsNullOrEmpty(mediaFileUrl))
        {
            @if (mediaFileUrl.EndsWith(".mp4") || mediaFileUrl.EndsWith(".webm") || mediaFileUrl.EndsWith(".mkv"))
            {
                <video controls width="100%" autoplay>
                    <source src="@mediaFileUrl" type="video/mp4">
                    <source src="@mediaFileUrl" type="video/webm">
                    <source src="@mediaFileUrl" type="video/x-matroska">
                    Dein Browser unterstützt kein Video-Tag.
                </video>
            }
            else if (mediaFileUrl.EndsWith(".mp3") || mediaFileUrl.EndsWith(".wav") || mediaFileUrl.EndsWith(".ogg"))
            {
                <audio controls autoplay>
                    <source src="@mediaFileUrl" type="audio/mpeg">
                    <source src="@mediaFileUrl" type="audio/wav">
                    <source src="@mediaFileUrl" type="audio/ogg">
                    Dein Browser unterstützt kein Audio-Tag.
                </audio>
            }
            else if (mediaFileUrl.EndsWith(".jpg") || mediaFileUrl.EndsWith(".jpeg") || mediaFileUrl.EndsWith(".png") || mediaFileUrl.EndsWith(".gif"))
            {
                <img src="@mediaFileUrl" alt="Bild" style="max-width:100%; height:auto;">
            }
            else if (mediaFileUrl.EndsWith(".pdf"))
            {
                <iframe src="@mediaFileUrl" width="100%" height="500px"></iframe>
            }
            else
            {
                <p>Dateiformat nicht unterstützt.</p>
                <a href="@mediaFileUrl" target="_blank">Datei öffnen</a>
            }
        }
    </BodyTemplate>
</Modal>

@code {
    private Modal media = default!;
    private string mediaFileUrl = "";
    private int currentMediaIndex = 0;

    private List<string> files = new();
    private List<string> folders = new();
    private List<string> breadcrumpParts = new();
    private List<string> roles = new();
    private RoleAttributes roleAttributes = new();
    private int totalCount = 0;
    private int currentPage = 1;
    private int itemsPerPage = 25;
    private int totalPages = 1;
    private string role = "";
    private string currentPath = "";
    private string searchTerm = "";
    private string breadcrumbPath = "";
    private bool mediaControlFeature = false;

    private async Task GetFileStream(string currentPath, string requestedFile)
    {
        currentMediaIndex = files.IndexOf(requestedFile);
        mediaFileUrl = $"https://test.nihonsaba.net/files/{currentPath.Replace(@"\", "&")}&{requestedFile}";
        await media.ShowAsync();
    }

    private async Task OnShowModalClick()
    {
        if(media != null)
        {
            await media.ShowAsync();
        }
    }

    private async Task OnHideModalClick()
    {
        if (media != null)
        {
            await media.HideAsync();
        }
    }

    private IEnumerable<(string Name, bool IsFolder)> PagedItems =>
        folders
            .Where(f => string.IsNullOrEmpty(searchTerm) || f.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
            .Select(f => (f, true)) 
            .Concat(
                files
                    .Where(f => string.IsNullOrEmpty(searchTerm) || f.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
                    .Select(f => (f, false)) 
            )
            .Skip((currentPage - 1) * itemsPerPage)
            .Take(itemsPerPage);


    protected override async Task OnInitializedAsync()
    {
        breadcrumpParts.Clear();
        LoadFolders();
        LoadFiles();
        await LoadRoles();
    }

    protected async Task LoadRoles()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User.Identity;
        var userId = authState.User.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value;
        if (userId != null)
        {
            roles = await UserManagementService.GetRoleOfUserAsync(userId);
            role = roles.First();
        }
        StateHasChanged();
        await LoadRoleAttributes();
    }

    public async Task LoadRoleAttributes()
    {
        roleAttributes = await RoleAttributeService.GetRoleAttribute(role, "MediaControl");
        mediaControlFeature = roleAttributes.Value;
    }

    private void LoadFiles()
    {
        files = FileService.GetFiles();
        UpdateTotalPages();
        currentPage = 1;
    }
    private void LoadFolders()
    {
        folders = FileService.GetFolders();
        UpdateTotalPages();
        currentPage = 1;
    }

    private void GoToFolder(string folder)
    {
        if (folder == "root")
        {
            currentPath = "";
            breadcrumpParts.Clear();
        }
        else
        {
            if (!currentPath.EndsWith(@"\")) { currentPath = currentPath + @"\"; }

            int index = breadcrumpParts.LastIndexOf(folder);
            if (index >= 0 && index < breadcrumpParts.Count - 1)
            {
                currentPath = string.Join(@"\", breadcrumpParts.Take(index + 1));
                breadcrumpParts = breadcrumpParts.Take(index + 1).ToList();
            }
            else
            {
                currentPath += folder;
                breadcrumpParts.Add(folder);
            }
        }

        if (currentPath.StartsWith(@"\"))
        {
            currentPath = currentPath.TrimStart('\\');
        }

        string pathForFetching = currentPath;
        if (!string.IsNullOrEmpty(pathForFetching) && !pathForFetching.EndsWith(@"\"))
        {
            pathForFetching += @"\";
        }

        folders = FileService.FetchFoldersFromFolder(pathForFetching);
        files = FileService.FetchFilesFromFolder(pathForFetching);

        UpdateTotalPages();
        currentPage = 1;
        StateHasChanged();
    }

    private void HandleItemsPerPageChange(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int newItemsPerPage))
        {
            itemsPerPage = newItemsPerPage;
            currentPage = 1;
            UpdateTotalPages();
            StateHasChanged();
        }
    }



    private void UpdateTotalPages()
    {
        int totalItems = folders.Count(f => string.IsNullOrEmpty(searchTerm) || f.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) +
                         files.Count(f => string.IsNullOrEmpty(searchTerm) || f.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));

        totalPages = (int)Math.Ceiling((double)totalItems / itemsPerPage);
        if (totalPages == 0) totalPages = 1;
        if (currentPage > totalPages) currentPage = totalPages;

        totalCount = totalItems;
    }


    private void PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
        }
    }

    private void NextPage()
    {
        if (currentPage < totalPages)
        {
            currentPage++;
        }
    }

    private void OnSearchChanged(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? "";
        currentPage = 1;
        UpdateTotalPages();
    }
}