@page "/filelist"
@inject FileService FileService
@rendermode InteractiveServer
@attribute [Authorize]

@if (files == null && folders == null)
{
    <p>Lade Dateien...</p>
}
else if (!files.Any() && !folders.Any())
{
    <p>Keine Dateien gefunden.</p>
}
else
{
    <nav aria-label="breadcrumb">
        <ol class="breadcrumb" style="display:block; border:1px solid; border-radius:10px">
            <button class="btn btn-link" @onclick="@(() => GoToFolder("root"))"><span class="bi-house-fill"></span></button>
            @foreach(var breadcrump in breadcrumpParts)
            {
                <button class="btn btn-link" style="color:white; text-decoration:none;" @onclick="() => GoToFolder(breadcrump)">@breadcrump</button>
            }
        </ol>
    </nav>

    <input class="form-control" placeholder="Suche" @bind="searchTerm" @oninput="OnSearchChanged" />

    <table class="table table-striped" style="margin-top:10px;">
        <thead>
            <tr>
                <th>#</th>
                <th>Dateiname</th>
            </tr>
        </thead>
        <tbody>
            @{
                int index = (currentPage - 1) * itemsPerPage + 1;
            }
            @foreach (var item in PagedItems)
            {
                <tr>
                    <td>@index</td>
                    <td>
                        @if (item.IsFolder)
                        {
                            <button class="btn btn-link" @onclick="() => GoToFolder(item.Name)" 
                            style="text-decoration:none; color:white;">
                                [Dir] @item.Name
                            </button>
                        }
                        else
                        {
                            <a href="https://test.nihonsaba.net/files/@string.Concat(currentPath.Replace(@"\","&"),"&"+item.Name)" 
                            style="text-decoration:none; color:white;">
                                @item.Name
                            </a>
                        }
                    </td>
                </tr>
                index++;
            }


        </tbody>
    </table>

    <div class="row" style="margin-bottom:50px">
        <div class="col-sm-4" style="display:block ruby; gap:10px;">

            <span>Anzeige #</span>

            <select class="form-control" style="width:50px;" @onchange="HandleItemsPerPageChange">
                <option value="25">25</option>
                <option value="50">50</option>
            </select>

            <button class="btn btn-primary" @onclick="PreviousPage" disabled="@(currentPage == 1)">
                Zur√ºck
            </button>

            <span>Seite @currentPage von @totalPages</span>

            <button class="btn btn-primary" @onclick="NextPage" disabled="@(currentPage == totalPages)">
                Weiter
            </button>
        </div>
        <div class="col-sm-8" style="text-align:end;">
            <p>Gesamt: @totalCount</p>
        </div>
    </div>
}

@code {
    private List<string> files = new();
    private List<string> folders = new();
    private List<string> breadcrumpParts = new();
    private int totalCount = 0;
    private int currentPage = 1;
    private int itemsPerPage = 25;
    private int totalPages = 1;
    private string currentPath = "";
    private string searchTerm = "";
    private string breadcrumbPath = "";

    private IEnumerable<(string Name, bool IsFolder)> PagedItems => 
        folders
            .Where(f => string.IsNullOrEmpty(searchTerm) || f.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
            .Select(f => (f, true)) // Mark as folder
            .Concat(
                files
                    .Where(f => string.IsNullOrEmpty(searchTerm) || f.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
                    .Select(f => (f, false)) // Mark as file
            )
            .Skip((currentPage - 1) * itemsPerPage)
            .Take(itemsPerPage);


    protected override void OnInitialized()
    {
        breadcrumpParts.Clear();
        LoadFolders();
        LoadFiles();
    }

    private void LoadFiles()
    {
        files = FileService.GetFiles();
        UpdateTotalPages();
        currentPage = 1;
    }
    private void LoadFolders()
    {
        folders = FileService.GetFolders();
        UpdateTotalPages();
        currentPage = 1;
    }

    private void GoToFolder(string folder)
    {
        if (folder == "root")
        {
            currentPath = "";
            breadcrumpParts.Clear();
        }
        else
        {
            if (!currentPath.EndsWith(@"\")) { currentPath = currentPath + @"\"; }

            int index = breadcrumpParts.LastIndexOf(folder);
            if (index >= 0 && index < breadcrumpParts.Count - 1)
            {
                currentPath = string.Join(@"\", breadcrumpParts.Take(index + 1));
                breadcrumpParts = breadcrumpParts.Take(index + 1).ToList();
            }
            else
            {
                currentPath += folder;
                breadcrumpParts.Add(folder);
            }
        }

        if (currentPath.StartsWith(@"\"))
        {
            currentPath = currentPath.TrimStart('\\');
        }

        string pathForFetching = currentPath;
        if (!string.IsNullOrEmpty(pathForFetching) && !pathForFetching.EndsWith(@"\"))
        {
            pathForFetching += @"\";
        }

        folders = FileService.FetchFoldersFromFolder(pathForFetching);
        files = FileService.FetchFilesFromFolder(pathForFetching);

        UpdateTotalPages();
        currentPage = 1;
        StateHasChanged();
    }

    private void HandleItemsPerPageChange(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int newItemsPerPage))
        {
            itemsPerPage = newItemsPerPage;
            currentPage = 1;
            UpdateTotalPages();
            StateHasChanged();
        }
    }



    private void UpdateTotalPages()
    {
        int totalItems = folders.Count(f => string.IsNullOrEmpty(searchTerm) || f.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) +
                         files.Count(f => string.IsNullOrEmpty(searchTerm) || f.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));

        totalPages = (int)Math.Ceiling((double)totalItems / itemsPerPage);
        if (totalPages == 0) totalPages = 1;
        if (currentPage > totalPages) currentPage = totalPages;

        totalCount = totalItems;
    }


    private void PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
        }
    }

    private void NextPage()
    {
        if (currentPage < totalPages)
        {
            currentPage++;
        }
    }

    private void OnSearchChanged(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? "";
        currentPage = 1;
        UpdateTotalPages();
    }
}
